{
   "protocols": [
      {
         "name": "Sequence",
         "associatedTypes": [
            "Iterator"
         ],
         "properties": [
            "func makeIterator() -> Self.Iterator"
         ]
      },
      {
         "name": "Sendable",
         "properties": []
      },
      {
         "name": "Collection",
         "associatedTypes": [
            "Index",
            "Indices"
         ],
         "properties": [
            "subscript(position: Self.Index) -> Self.Element",
            "var startIndex: Self.Index",
            "var endIndex: Self.Index",
            "var indices: Self.Indices",
            "func index(after i: Self.Index) -> Self.Index"
         ]
      },
      {
         "name": "BidirectionalCollection",
         "properties": [
            "func index(before i: Self.Index) -> Self.Index"
         ]
      },
      {
         "name": "RandomAccessCollection",
         "properties": [
            "func distance(from start: Self.Index, to end: Self.Index) -> Int",
            "func index(_ i: Self.Index, offsetBy distance: Int) -> Self.Index",
            "func index(_ i: Self.Index, offsetBy distance: Int, limitedBy limit: Self.Index) -> Self.Index?"
         ]
      },
      {
         "name": "Hashable",
         "properties": [
            "func hash(into hasher: inout Hasher)"
         ]
      },
      {
         "name": "Equatable",
         "properties": [
            "static func == (lhs: Self, rhs: Self) -> Bool"
         ]
      },
      {
         "name": "Comparable",
         "properties": [
            "static func < (lhs: Self, rhs: Self) -> Bool"
         ]
      },
      {
         "name": "Pure",
         "associatedTypes": [
            "PureA"
         ],
         "properties": [
            "static func pure(_ x: PureA) -> Self"
         ]
      },
      {
         "name": "Semigroup",
         "properties": [
            "static func <> (lhs: Self, rhs: Self) -> Self"
         ]
      },
      {
         "name": "Functor",
         "properties": []
      }
   ],
   "structs": [
      {
         "name": "Array",
         "type": "generic",
         "arguments": [
            "Element"
         ],
         "conformances": [
            {
               "name": "Sequence"
            },
            {
               "name": "Sendable"
            },
            {
               "name": "Collection"
            },
            {
               "name": "BidirectionalCollection"
            },
            {
               "name": "Hashable",
               "where": "Element: Hashable"
            },
            {
               "name": "Equatable",
               "where": "Element: Equatable"
            },
            {
               "name": "RandomAccessCollection"
            },
            {
               "name": "Semigroup"
            },
            {
               "name": "Pure"
            },
            {
               "name": "Functor"
            }
         ]
      },
      {
         "name": "Set",
         "type": "generic",
         "arguments": [
            "Element"
         ],
         "conformances": [
            {
               "name": "Sequence"
            },
            {
               "name": "Sendable"
            },
            {
               "name": "Collection"
            },
            {
               "name": "Equatable",
               "where": "Element: Equatable"
            },
            {
               "name": "Hashable"
            },
            {
               "name": "Semigroup"
            },
            {
               "name": "Pure"
            },
            {
               "name": "Functor"
            }
         ]
      },
      {
         "name": "Dictionary",
         "type": "concrete",
         "elements": "(key: Key, value: Value)",
         "conformances": [
            {
               "name": "Sequence"
            },
            {
               "name": "Sendable"
            },
            {
               "name": "Collection"
            },
            {
               "name": "Equatable",
               "where": "Key: Equatable, Value: Equatable"
            },
            {
               "name": "Hashable",
               "where": "Value: Hashable"
            },
            {
               "name": "Semigroup"
            },
            {
               "name": "Pure"
            }
         ]
      },
      {
         "name": "String",
         "type": "concrete",
         "elements": "Character",
         "conformances": [
            {
               "name": "Sequence"
            },
            {
               "name": "Collection"
            },
            {
               "name": "BidirectionalCollection"
            },
            {
               "name": "Equatable"
            },
            {
               "name": "Hashable"
            },
            {
               "name": "Comparable"
            },
            {
               "name": "Semigroup"
            },
            {
               "name": "Pure"
            }
         ]
      },
      {
         "name": "Optional",
         "type": "concrete",
         "elements": "Wrapped",
         "conformances": []
      }
   ],
   "templates": [
      {
         "name": "NonEmpty",
         "type": "containerStruct",
         "applyOn": [
            "Array",
            "Set",
            "Dictionary",
            "String"
         ]
      },
      {
         "name": "FunctorFromSequence",
         "type": "protocolExtension",
         "applyOn": [
            "Array",
            "Set"
         ]
      },
      {
         "name": "FunctorExtensions",
         "type": "protocolExtension",
         "applyOn": [
            "Array",
            "Set",
            "Optional"
         ]
      }
   ]
}
