extension \(type) {
    public struct NonEmpty {
        public let first: \(item)
        let container: \(fullyQualifiedType)
        
        enum CodingKeys: String, CodingKey {
            case first
            case container
        }
        
        public init(first: \(item), container: \(fullyQualifiedType)) {
            self.first = first
            self.container = container
        }
        
        public init?(container: \(fullyQualifiedType)) {
            guard let first = container.first else { return nil }
            self.first = first
            self.container = container
        }
    }
}

public extension \(type).NonEmpty {
    var erased: \(fullyQualifiedType) {
        container
    }
}
