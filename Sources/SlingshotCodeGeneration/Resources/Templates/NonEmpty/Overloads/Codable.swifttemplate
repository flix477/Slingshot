extension \(type).NonEmpty: Encodable where \(type).Element: Encodable {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: \(type).NonEmpty.CodingKeys.self)
        try container.encode(first, forKey: .first)
        try container.encode(self.container, forKey: .container)
    }
}

extension \(type).NonEmpty: Decodable where \(type).Element: Decodable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: \(type).NonEmpty.CodingKeys.self)
        self.first = try container.decode(\(item).self, forKey: .first)
        self.container = try container.decode(\(type).self, forKey: .container)
    }
}
